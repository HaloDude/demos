apiVersion: v1
kind: Service
metadata:
  name: '{{ .Release.Name }}-prometheus'
  labels:
    app: '{{ .Release.Name }}-prometheus'
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
  annotations:
    prometheus.io/scrape: 'true'
spec:
  selector:
    app: '{{ .Release.Name }}-prometheus'
  ports:
  - port: 9090
    protocol: TCP
{{- if .Values.prometheus.authentication.enabled }}
{{- if .Values.prometheus.authentication.oidc.enabled }}    
    targetPort: 9080
{{- else }}
    targetPort: 9090
{{- end }}
{{- else }}
    targetPort: 9090
{{- end }}
{{- if .Values.prometheus.ingress.domain }}
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: '{{ .Release.Name }}-prometheus'
  labels:
    app: '{{ .Release.Name }}-prometheus'
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
  annotations:
    ingress.kubernetes.io/ssl-redirect: "true"
    kubernetes.io/tls-acme: "true"
spec:
  tls:
    - secretName: "tls-{{ .Values.prometheus.ingress.domain }}"
      hosts:
        - {{ .Values.prometheus.ingress.domain }}
  rules:
    - host: {{ .Values.prometheus.ingress.domain }}
      http:
        paths:
          - path: /
            backend:
              serviceName: '{{ .Release.Name }}-prometheus'
              servicePort: 9090
{{- end }}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: '{{ .Release.Name }}-prometheus'
  labels:
    app: '{{ .Release.Name }}-prometheus'
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  replicas: 1
  revisionHistoryLimit: {{ .Values.prometheus.revisionHistoryLimit }}
  selector:
    matchLabels:
      app: '{{ .Release.Name }}-prometheus'
  strategy:
    # we do not want 2 instances running in parallel during update
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  template:
    metadata:
      name: '{{ .Release.Name }}-prometheus'
      labels:
        app: '{{ .Release.Name }}-prometheus'
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
    spec:
{{- if .Values.prometheus.nodeName }}
      nodeName: '{{ .Values.prometheus.nodeName }}'
{{- end }}
{{- if .Values.prometheus.nodeSelector }}
      nodeSelector:
{{ .Values.prometheus.nodeSelector | toYaml | indent 8 }}
{{- end }}
{{- if .Values.prometheus.tolerations }}
      tolerations:
{{ .Values.prometheus.tolerations | toYaml | indent 8 }}
{{- end }}
{{- if .Values.prometheus.priorityClassName }}
      priorityClassName: '{{ .Values.prometheus.priorityClassName }}'
{{- end }}
      containers:
{{- if .Values.instanceDiscovery.enabled }}
      - name: instance-discovery
        image: {{ .Values.instanceDiscovery.registry }}/{{ .Values.instanceDiscovery.name }}:{{ .Values.instanceDiscovery.version }}
        command:
        - /var/kublr/instance-discovery
        env:
        - name: PROMETHEUS_FILE
          value: "{{ .Values.instanceDiscovery.env.prometheusFile }}"
        - name: VERBOSE
          value: "{{ .Values.instanceDiscovery.env.verbose }}"
        - name: SCHEDULE
          value: "{{ .Values.instanceDiscovery.env.schedule }}"
        resources:
{{ .Values.instanceDiscovery.resources | toYaml | indent 10 }}
        volumeMounts:
        - name: discovery-volume
          mountPath: /instance-discovery
{{- end }}
{{- if .Values.prometheus.authentication.enabled }}
{{- if .Values.prometheus.authentication.oidc.enabled }}
      - name: prometheus-auth-proxy
        image: quay.io/gambol99/keycloak-proxy:latest
        args:
        - --discovery-url={{ .Values.prometheus.authentication.oidc.keycloak_url }}auth/realms/{{ .Values.prometheus.authentication.oidc.realm }}/.well-known/openid-configuration
        - --skip-openid-provider-tls-verify=true
        - --client-id={{ .Values.prometheus.authentication.oidc.client_id }}
        - --client-secret={{ .Values.prometheus.authentication.oidc.client_secret }}
        - --listen=0.0.0.0:9080
        - --enable-encrypted-token=false
        - --enable-logging=true
        - --enable-json-logging=true
        - --verbose=true
        - --upstream-url=http://127.0.0.1:9090
        {{- if .Values.prometheus.ingress.domain }}
        - --redirection-url=https://{{ .Values.prometheus.ingress.domain }}/
        {{- else if .Values.kubernetesApiEndpoint }}
        - '--redirection-url={{ .Values.kubernetesApiEndpoint }}/api/v1/namespaces/{{ .Release.Namespace }}/services/{{ .Release.Name }}-prometheus:9090/proxy'
        {{- end }}
        - --resources=uri=/|roles={{ .Values.prometheus.authentication.oidc.guest_role }}
        - --resources=uri=/alerts|roles={{ .Values.prometheus.authentication.oidc.guest_role }}
        - --resources=uri=/graph|roles={{ .Values.prometheus.authentication.oidc.guest_role }}
        - --resources=uri=/status|roles={{ .Values.prometheus.authentication.oidc.guest_role }}
        - --resources=uri=/config|roles={{ .Values.prometheus.authentication.oidc.admin_role }}
        - --resources=uri=/flags|roles={{ .Values.prometheus.authentication.oidc.admin_role }}
        - --resources=uri=/rules|roles={{ .Values.prometheus.authentication.oidc.admin_role }}
        - --resources=uri=/targets|roles={{ .Values.prometheus.authentication.oidc.admin_role }}        
        - --forbidden-page=/opt/templates/forbidden.html.tmpl
{{- if .Values.prometheus.authentication.oidc.encryption_key }}
        - --enable-refresh-tokens=true
        - --encryption-key={{ .Values.prometheus.authentication.oidc.encryption_key }}
        - --enable-encrypted-token=true
{{- end }}
        ports:
        - name: proxy-web
          containerPort: 9080
{{- end }}
{{- end }}
      - name: prometheus
        image: prom/prometheus:{{ .Values.prometheus.version }}
        securityContext:
          runAsUser: 0
        args:
        {{- if .Values.prometheus.ingress.domain }}
        - '--web.external-url=https://{{ .Values.prometheus.ingress.domain }}/'
        {{- else if .Values.kubernetesApiEndpoint }}
        - --web.external-url={{ .Values.kubernetesApiEndpoint }}/api/v1/namespaces/{{ .Release.Namespace }}/services/{{ .Release.Name }}-prometheus/proxy/
        - --web.route-prefix=/
        {{- end }}
        - --log.level={{.Values.prometheus.logLevel}}
        - --config.file=/prometheus-conf/prometheus.yaml
        - --web.enable-admin-api
        - --web.enable-lifecycle
        - --storage.tsdb.path=/prometheus
        - --storage.tsdb.min-block-duration=10m
        - --storage.tsdb.max-block-duration=20m
        - --storage.tsdb.retention=15d
        ports:
        - name: web
          containerPort: 9090
        resources:
{{ .Values.prometheus.resources | toYaml | indent 10 }}
        volumeMounts:
        - name: config-volume
          mountPath: /prometheus-conf
        - name: data-volume
          mountPath: /prometheus
{{- if .Values.prometheus.persistence.subPath }}
          subPath: {{ .Values.prometheus.persistence.subPath }}
{{- end }}
        - name: discovery-volume
          mountPath: /instance-discovery
      volumes:
      - name: discovery-volume
        emptyDir: {}
      - name: config-volume
        configMap:
          name: '{{ .Release.Name }}-prometheus'
      - name: data-volume
{{- if not .Values.prometheus.persistence.enabled }}
        emptyDir: {}
{{- else if .Values.prometheus.persistence.hostPath }}
        hostPath:
          path: {{ .Values.prometheus.persistence.hostPath }}
{{- if semverCompare ">= 1.8" ( printf "%s.%s" .Capabilities.KubeVersion.Major .Capabilities.KubeVersion.Minor ) }}
          type: DirectoryOrCreate
{{- end }}
{{- else if .Values.prometheus.persistence.preconfiguredPersistentVolumeClaim }}
        persistentVolumeClaim:
          claimName: {{ .Values.prometheus.persistence.preconfiguredPersistentVolumeClaim }}
{{- else }}
        persistentVolumeClaim:
          claimName: '{{ .Release.Name }}-prometheus'
{{- end }}
